@page "/"
@using SEP3.Data
@using  SEP3.Services
@inject IUserService userService
@inject NavigationManager navManager
@inject NotificationService notificationService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
<style>
    #login {
        border-radius: 5px;
        border: 4px solid #4267B2;
        margin: 20px;
        padding: 10px;
        align-content: center;
        text-align: center;
        left: 33%;
    }

    #header {
        color: #4267B2;
        font-size: 30px;
        margin: 20px;
    }
</style>

<EditForm Model="@user" OnValidSubmit="@UserLogin">
    <DataAnnotationsValidator />

    <div id="header">
        <label>Login or Create an Account</label>
    </div>
    <br />
    <br />
    <div id="login" class="col-3">
        <br />
        <div class="col-12">
            <label class="col-12 font-weight-bold">Your Username</label>
            <InputText class=" form-control col-12 font-italic" @bind-Value="user.username" placeholder="username" />

            &nbsp;<ValidationMessage For="@(() => user.username)" />
        </div>
        <br />
        <br />
        <div class="col-12">
            <label class="col-12 font-weight-bold">Your Password</label>
            <input type="password" class="form-control col-12 font-italic" @bind="user.password" placeholder="password" />

            &nbsp;<ValidationMessage For="@(() => user.password)" />
        </div>
        <br />
        <br />
        <div class="col-12 row">
            <input type="submit" class="form-control col-6 btn btn-primary" style="margin-right: 10px" value="Login" />
            <span>&nbsp;</span>
            <a href="/createaccount">Create Account</a>
            <!--<button class="btn btn-primary" @onclick="createAccountPage">Create Account</button>-->
            <!-- <input type="submit" class="form-control col-2 btn btn-primary" value="Create account" /> -->
        </div>
    </div>
</EditForm>


@code {

    public User user;
    public bool isCorrect;

    protected override async Task OnInitializedAsync()
    {
        user = new User();

    }
    public async void UserLogin()
    {
        //sending user to confirm
        User returnedUser = await userService.LoginAsync(user);

        // Authentification user and adding to session storage
        if (returnedUser.username.Equals(user.username))
        {
            ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(returnedUser);
            await sessionStorage.SetItemAsync("username", returnedUser.username);
            await sessionStorage.SetItemAsync("user", returnedUser);
            Console.WriteLine($"answer: {returnedUser}");

            navManager.NavigateTo("/main");
        }
        else
        {
            Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();
            Console.WriteLine("Answer: " + returnedUser);
            NotificationMessage message = new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Error Summary", Detail = "Error Detail", Duration = 4000 };
            notificationService.Notify(message);
            events.Add(DateTime.Now, $"{message.Severity} notification");
            await InvokeAsync(() => { StateHasChanged(); });
            // TODO Notification wrong user
        }

    }

    private async Task<bool> createAccountPage()
    {
        Console.WriteLine("*************** USER ACCOUNT CREATE******************");
        return await Task.FromResult(true);
    }




}